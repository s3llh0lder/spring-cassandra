plugins {
    id 'example.azure-devops-repository'
    id 'java'
    id "jacoco"
//    id 'org.owasp.dependencycheck'
}

allprojects {
    sourceCompatibility = '21'
}

compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

dependencies {
}

test {
    useJUnitPlatform()
}

// see https://docs.gradle.org/current/samples/sample_jvm_multi_project_with_code_coverage.html
// Do not generate reports for individual projects
tasks.named("jacocoTestReport") {
    enabled = false
}

// A resolvable configuration to collect source output code
def sourcesOutputPath = configurations.create("sourcesOutputPath") {
    visible = false
    canBeResolved = true
    canBeConsumed = false
    extendsFrom(configurations.implementation)
    attributes {
        attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
        attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))
        attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, 'source-output-folders'))
    }
}

// Share sources output folder with other projects for aggregated JaCoCo reports
configurations.create('transitiveSourceOutputsElements') {
    visible = false
    canBeResolved = false
    canBeConsumed = true
    extendsFrom(configurations.implementation)
    attributes {
        attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
        attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))
        attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, 'source-output-folders'))
    }
    // Fixed: Use destinationDirectory instead of deprecated outputDir
    outgoing.artifact(sourceSets.main.java.destinationDirectory)
}

// Share the coverage data to be aggregated for the whole product
configurations.create('coverageDataElements') {
    visible = false
    canBeResolved = false
    canBeConsumed = true
    extendsFrom(configurations.implementation)
    attributes {
        attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
        attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))
        attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, 'jacoco-coverage-data'))
    }
    // This will cause the test task to run if the coverage data is requested by the aggregation task
    outgoing.artifact(tasks.named("test").map { task ->
        task.extensions.getByType(JacocoTaskExtension).destinationFile
    })
}